{"ast":null,"code":"\"use strict\";\n\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty2 from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty2(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _classCallCheck(a, n) {\n  if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\");\n}\nfunction _defineProperties(e, r) {\n  for (var t = 0; t < r.length; t++) {\n    var o = r[t];\n    o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o);\n  }\n}\nfunction _createClass(e, r, t) {\n  return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", {\n    writable: !1\n  }), e;\n}\nfunction _callSuper(t, o, e) {\n  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));\n}\nfunction _possibleConstructorReturn(t, e) {\n  if (e && (\"object\" == typeof e || \"function\" == typeof e)) return e;\n  if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\");\n  return _assertThisInitialized(t);\n}\nfunction _assertThisInitialized(e) {\n  if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  return e;\n}\nfunction _isNativeReflectConstruct() {\n  try {\n    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n  } catch (t) {}\n  return (_isNativeReflectConstruct = function _isNativeReflectConstruct() {\n    return !!t;\n  })();\n}\nfunction _getPrototypeOf(t) {\n  return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) {\n    return t.__proto__ || Object.getPrototypeOf(t);\n  }, _getPrototypeOf(t);\n}\nfunction _inherits(t, e) {\n  if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\");\n  t.prototype = Object.create(e && e.prototype, {\n    constructor: {\n      value: t,\n      writable: !0,\n      configurable: !0\n    }\n  }), Object.defineProperty(t, \"prototype\", {\n    writable: !1\n  }), e && _setPrototypeOf(t, e);\n}\nfunction _setPrototypeOf(t, e) {\n  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) {\n    return t.__proto__ = e, t;\n  }, _setPrototypeOf(t, e);\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: !0,\n    configurable: !0,\n    writable: !0\n  }) : e[r] = t, e;\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r || \"default\");\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nimport { getDefaultHeaderHeight, SafeAreaProviderCompat } from '@react-navigation/elements';\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { forModalPresentationIOS, forNoAnimation as forNoAnimationCard } from \"../../TransitionConfigs/CardStyleInterpolators.js\";\nimport { BottomSheetAndroid, DefaultTransition, FadeFromBottomAndroid, FadeFromRightAndroid, ModalFadeTransition, ModalSlideFromBottomIOS, ModalTransition, RevealFromBottomAndroid, ScaleFromCenterAndroid, SlideFromLeftIOS, SlideFromRightIOS } from \"../../TransitionConfigs/TransitionPresets.js\";\nimport { findLastIndex } from \"../../utils/findLastIndex.js\";\nimport { getDistanceForDirection } from \"../../utils/getDistanceForDirection.js\";\nimport { getModalRouteKeys } from \"../../utils/getModalRoutesKeys.js\";\nimport { MaybeScreen, MaybeScreenContainer } from \"../Screens.js\";\nimport { CardContainer } from \"./CardContainer.js\";\nimport { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\nvar NAMED_TRANSITIONS_PRESETS = {\n  default: DefaultTransition,\n  fade: ModalFadeTransition,\n  fade_from_bottom: FadeFromBottomAndroid,\n  fade_from_right: FadeFromRightAndroid,\n  none: DefaultTransition,\n  reveal_from_bottom: RevealFromBottomAndroid,\n  scale_from_center: ScaleFromCenterAndroid,\n  slide_from_left: SlideFromLeftIOS,\n  slide_from_right: SlideFromRightIOS,\n  slide_from_bottom: Platform.select({\n    ios: ModalSlideFromBottomIOS,\n    default: BottomSheetAndroid\n  })\n};\nvar EPSILON = 1e-5;\nvar STATE_INACTIVE = 0;\nvar STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nvar STATE_ON_TOP = 2;\nvar FALLBACK_DESCRIPTOR = Object.freeze({\n  options: {}\n});\nvar getInterpolationIndex = function getInterpolationIndex(scenes, index) {\n  var cardStyleInterpolator = scenes[index].descriptor.options.cardStyleInterpolator;\n  var interpolationIndex = 0;\n  for (var i = index - 1; i >= 0; i--) {\n    var _scenes$i;\n    var cardStyleInterpolatorCurrent = (_scenes$i = scenes[i]) == null ? void 0 : _scenes$i.descriptor.options.cardStyleInterpolator;\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n    interpolationIndex++;\n  }\n  return interpolationIndex;\n};\nvar getIsModalPresentation = function getIsModalPresentation(cardStyleInterpolator) {\n  return cardStyleInterpolator === forModalPresentationIOS || cardStyleInterpolator.name === 'forModalPresentationIOS';\n};\nvar getIsModal = function getIsModal(scene, interpolationIndex, isParentModal) {\n  if (isParentModal) {\n    return true;\n  }\n  var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n  var isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  var isModal = isModalPresentation && interpolationIndex !== 0;\n  return isModal;\n};\nvar getHeaderHeights = function getHeaderHeights(scenes, insets, isParentHeaderShown, isParentModal, layout, previous) {\n  return scenes.reduce(function (acc, curr, index) {\n    var _curr$descriptor$opti = curr.descriptor.options,\n      _curr$descriptor$opti2 = _curr$descriptor$opti.headerStatusBarHeight,\n      headerStatusBarHeight = _curr$descriptor$opti2 === void 0 ? isParentHeaderShown ? 0 : insets.top : _curr$descriptor$opti2,\n      headerStyle = _curr$descriptor$opti.headerStyle;\n    var style = StyleSheet.flatten(headerStyle || {});\n    var height = 'height' in style && typeof style.height === 'number' ? style.height : previous[curr.route.key];\n    var interpolationIndex = getInterpolationIndex(scenes, index);\n    var isModal = getIsModal(curr, interpolationIndex, isParentModal);\n    acc[curr.route.key] = typeof height === 'number' ? height : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n    return acc;\n  }, {});\n};\nvar getDistanceFromOptions = function getDistanceFromOptions(layout, descriptor, isRTL) {\n  var _NAMED_TRANSITIONS_PR;\n  if (descriptor != null && descriptor.options.gestureDirection) {\n    return getDistanceForDirection(layout, descriptor == null ? void 0 : descriptor.options.gestureDirection, isRTL);\n  }\n  var defaultGestureDirection = (descriptor == null ? void 0 : descriptor.options.presentation) === 'modal' ? ModalTransition.gestureDirection : DefaultTransition.gestureDirection;\n  var gestureDirection = descriptor != null && descriptor.options.animation ? (_NAMED_TRANSITIONS_PR = NAMED_TRANSITIONS_PRESETS[descriptor == null ? void 0 : descriptor.options.animation]) == null ? void 0 : _NAMED_TRANSITIONS_PR.gestureDirection : defaultGestureDirection;\n  return getDistanceForDirection(layout, gestureDirection, isRTL);\n};\nvar getProgressFromGesture = function getProgressFromGesture(gesture, layout, descriptor, isRTL) {\n  var distance = getDistanceFromOptions({\n    width: Math.max(1, layout.width),\n    height: Math.max(1, layout.height)\n  }, descriptor, isRTL);\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0]\n    });\n  }\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1]\n  });\n};\nexport var CardStack = function (_React$Component) {\n  function CardStack(_props) {\n    var _this;\n    _classCallCheck(this, CardStack);\n    _this = _callSuper(this, CardStack, [_props]);\n    _defineProperty(_this, \"handleLayout\", function (e) {\n      var _e$nativeEvent$layout = e.nativeEvent.layout,\n        height = _e$nativeEvent$layout.height,\n        width = _e$nativeEvent$layout.width;\n      var layout = {\n        width: width,\n        height: height\n      };\n      _this.setState(function (state, props) {\n        if (height === state.layout.height && width === state.layout.width) {\n          return null;\n        }\n        return {\n          layout: layout,\n          headerHeights: getHeaderHeights(state.scenes, props.insets, props.isParentHeaderShown, props.isParentModal, layout, state.headerHeights)\n        };\n      });\n    });\n    _defineProperty(_this, \"handleHeaderLayout\", function (_ref) {\n      var route = _ref.route,\n        height = _ref.height;\n      _this.setState(function (_ref2) {\n        var headerHeights = _ref2.headerHeights;\n        var previousHeight = headerHeights[route.key];\n        if (previousHeight === height) {\n          return null;\n        }\n        return {\n          headerHeights: _objectSpread(_objectSpread({}, headerHeights), {}, _defineProperty2({}, route.key, height))\n        };\n      });\n    });\n    _defineProperty(_this, \"getFocusedRoute\", function () {\n      var state = _this.props.state;\n      return state.routes[state.index];\n    });\n    _defineProperty(_this, \"getPreviousScene\", function (_ref3) {\n      var route = _ref3.route;\n      var getPreviousRoute = _this.props.getPreviousRoute;\n      var scenes = _this.state.scenes;\n      var previousRoute = getPreviousRoute({\n        route: route\n      });\n      if (previousRoute) {\n        var previousScene = scenes.find(function (scene) {\n          return scene.descriptor.route.key === previousRoute.key;\n        });\n        return previousScene;\n      }\n      return undefined;\n    });\n    _this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: _this.props.descriptors,\n      headerHeights: {}\n    };\n    return _this;\n  }\n  _inherits(CardStack, _React$Component);\n  return _createClass(CardStack, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n      var _this$props = this.props,\n        insets = _this$props.insets,\n        state = _this$props.state,\n        routes = _this$props.routes,\n        openingRouteKeys = _this$props.openingRouteKeys,\n        closingRouteKeys = _this$props.closingRouteKeys,\n        onOpenRoute = _this$props.onOpenRoute,\n        onCloseRoute = _this$props.onCloseRoute,\n        renderHeader = _this$props.renderHeader,\n        isParentHeaderShown = _this$props.isParentHeaderShown,\n        isParentModal = _this$props.isParentModal,\n        onTransitionStart = _this$props.onTransitionStart,\n        onTransitionEnd = _this$props.onTransitionEnd,\n        onGestureStart = _this$props.onGestureStart,\n        onGestureEnd = _this$props.onGestureEnd,\n        onGestureCancel = _this$props.onGestureCancel,\n        _this$props$detachIna = _this$props.detachInactiveScreens,\n        detachInactiveScreens = _this$props$detachIna === void 0 ? Platform.OS === 'web' || Platform.OS === 'android' || Platform.OS === 'ios' : _this$props$detachIna;\n      var _this$state = this.state,\n        scenes = _this$state.scenes,\n        layout = _this$state.layout,\n        gestures = _this$state.gestures,\n        headerHeights = _this$state.headerHeights;\n      var focusedRoute = state.routes[state.index];\n      var focusedHeaderHeight = headerHeights[focusedRoute.key];\n      var isFloatHeaderAbsolute = this.state.scenes.slice(-2).some(function (scene) {\n        var _scene$descriptor$opt;\n        var options = (_scene$descriptor$opt = scene.descriptor.options) != null ? _scene$descriptor$opt : {};\n        var headerMode = options.headerMode,\n          headerTransparent = options.headerTransparent,\n          _options$headerShown = options.headerShown,\n          headerShown = _options$headerShown === void 0 ? true : _options$headerShown;\n        if (headerTransparent || headerShown === false || headerMode === 'screen') {\n          return true;\n        }\n        return false;\n      });\n      var activeScreensLimit = 1;\n      for (var i = scenes.length - 1; i >= 0; i--) {\n        var options = scenes[i].descriptor.options;\n        var _options$detachPrevio = options.detachPreviousScreen,\n          detachPreviousScreen = _options$detachPrevio === void 0 ? options.presentation === 'transparentModal' ? false : getIsModalPresentation(options.cardStyleInterpolator) ? i !== findLastIndex(scenes, function (scene) {\n            var cardStyleInterpolator = scene.descriptor.options.cardStyleInterpolator;\n            return cardStyleInterpolator === forModalPresentationIOS || (cardStyleInterpolator == null ? void 0 : cardStyleInterpolator.name) === 'forModalPresentationIOS';\n          }) : true : _options$detachPrevio;\n        if (detachPreviousScreen === false) {\n          activeScreensLimit++;\n        } else {\n          if (i <= scenes.length - 2) {\n            break;\n          }\n        }\n      }\n      var floatingHeader = _jsx(React.Fragment, {\n        children: renderHeader({\n          mode: 'float',\n          layout: layout,\n          scenes: scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [styles.floating, isFloatHeaderAbsolute && [{\n            height: focusedHeaderHeight\n          }, styles.absolute]]\n        })\n      }, \"header\");\n      return _jsxs(View, {\n        style: styles.container,\n        children: [isFloatHeaderAbsolute ? null : floatingHeader, _jsx(MaybeScreenContainer, {\n          enabled: detachInactiveScreens,\n          style: styles.container,\n          onLayout: this.handleLayout,\n          children: [].concat(_toConsumableArray(routes), _toConsumableArray(state.preloadedRoutes)).map(function (route, index) {\n            var _scenes, _scenes2;\n            var focused = focusedRoute.key === route.key;\n            var gesture = gestures[route.key];\n            var scene = scenes[index];\n            var isPreloaded = state.preloadedRoutes.includes(route) && !routes.includes(route);\n            if (state.preloadedRoutes.includes(route) && routes.includes(route) && index >= routes.length) {\n              return null;\n            }\n            var isScreenActive = 1;\n            if (index < routes.length - activeScreensLimit - 1 || isPreloaded) {\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              var sceneForActivity = scenes[routes.length - 1];\n              var outputValue = index === routes.length - 1 ? STATE_ON_TOP : index >= routes.length - activeScreensLimit ? STATE_TRANSITIONING_OR_BELOW_TOP : STATE_INACTIVE;\n              isScreenActive = sceneForActivity ? sceneForActivity.progress.current.interpolate({\n                inputRange: [0, 1 - EPSILON, 1],\n                outputRange: [1, 1, outputValue],\n                extrapolate: 'clamp'\n              }) : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n            var _scene$descriptor$opt2 = scene.descriptor.options,\n              _scene$descriptor$opt3 = _scene$descriptor$opt2.headerShown,\n              headerShown = _scene$descriptor$opt3 === void 0 ? true : _scene$descriptor$opt3,\n              headerTransparent = _scene$descriptor$opt2.headerTransparent,\n              freezeOnBlur = _scene$descriptor$opt2.freezeOnBlur,\n              autoHideHomeIndicator = _scene$descriptor$opt2.autoHideHomeIndicator;\n            var safeAreaInsetTop = insets.top;\n            var safeAreaInsetRight = insets.right;\n            var safeAreaInsetBottom = insets.bottom;\n            var safeAreaInsetLeft = insets.left;\n            var headerHeight = headerShown !== false ? headerHeights[route.key] : 0;\n            var interpolationIndex = getInterpolationIndex(scenes, index);\n            var isModal = getIsModal(scene, interpolationIndex, isParentModal);\n            var isNextScreenTransparent = ((_scenes = scenes[index + 1]) == null ? void 0 : _scenes.descriptor.options.presentation) === 'transparentModal';\n            var detachCurrentScreen = ((_scenes2 = scenes[index + 1]) == null ? void 0 : _scenes2.descriptor.options.detachPreviousScreen) !== false;\n            return _jsx(MaybeScreen, {\n              style: [StyleSheet.absoluteFill],\n              enabled: detachInactiveScreens,\n              active: isScreenActive,\n              freezeOnBlur: freezeOnBlur,\n              homeIndicatorHidden: autoHideHomeIndicator,\n              pointerEvents: \"box-none\",\n              children: _jsx(CardContainer, {\n                index: index,\n                interpolationIndex: interpolationIndex,\n                modal: isModal,\n                active: index === routes.length - 1,\n                focused: focused,\n                opening: openingRouteKeys.includes(route.key),\n                closing: closingRouteKeys.includes(route.key),\n                layout: layout,\n                gesture: gesture,\n                scene: scene,\n                safeAreaInsetTop: safeAreaInsetTop,\n                safeAreaInsetRight: safeAreaInsetRight,\n                safeAreaInsetBottom: safeAreaInsetBottom,\n                safeAreaInsetLeft: safeAreaInsetLeft,\n                onGestureStart: onGestureStart,\n                onGestureCancel: onGestureCancel,\n                onGestureEnd: onGestureEnd,\n                headerHeight: headerHeight,\n                isParentHeaderShown: isParentHeaderShown,\n                onHeaderHeightChange: _this2.handleHeaderLayout,\n                getPreviousScene: _this2.getPreviousScene,\n                getFocusedRoute: _this2.getFocusedRoute,\n                hasAbsoluteFloatHeader: isFloatHeaderAbsolute && !headerTransparent,\n                renderHeader: renderHeader,\n                onOpenRoute: onOpenRoute,\n                onCloseRoute: onCloseRoute,\n                onTransitionStart: onTransitionStart,\n                onTransitionEnd: onTransitionEnd,\n                isNextScreenTransparent: isNextScreenTransparent,\n                detachCurrentScreen: detachCurrentScreen,\n                preloaded: isPreloaded\n              })\n            }, route.key);\n          })\n        }), isFloatHeaderAbsolute ? floatingHeader : null]\n      });\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(props, state) {\n      if (props.routes === state.routes && props.descriptors === state.descriptors) {\n        return null;\n      }\n      var gestures = [].concat(_toConsumableArray(props.routes), _toConsumableArray(props.state.preloadedRoutes)).reduce(function (acc, curr) {\n        var descriptor = props.descriptors[curr.key] || props.preloadedDescriptors[curr.key];\n        var _ref4 = (descriptor == null ? void 0 : descriptor.options) || {},\n          animation = _ref4.animation;\n        acc[curr.key] = state.gestures[curr.key] || new Animated.Value(props.openingRouteKeys.includes(curr.key) && animation !== 'none' || props.state.preloadedRoutes.includes(curr) ? getDistanceFromOptions(state.layout, descriptor, props.direction === 'rtl') : 0);\n        return acc;\n      }, {});\n      var modalRouteKeys = getModalRouteKeys([].concat(_toConsumableArray(props.routes), _toConsumableArray(props.state.preloadedRoutes)), _objectSpread(_objectSpread({}, props.descriptors), props.preloadedDescriptors));\n      var scenes = [].concat(_toConsumableArray(props.routes), _toConsumableArray(props.state.preloadedRoutes)).map(function (route, index, self) {\n        var _optionsForTransition, _descriptor$options$h;\n        var isPreloaded = props.state.preloadedRoutes.includes(route);\n        var previousRoute = isPreloaded ? undefined : self[index - 1];\n        var nextRoute = isPreloaded ? undefined : self[index + 1];\n        var oldScene = state.scenes[index];\n        var currentGesture = gestures[route.key];\n        var previousGesture = previousRoute ? gestures[previousRoute.key] : undefined;\n        var nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n        var descriptor = (isPreloaded ? props.preloadedDescriptors : props.descriptors)[route.key] || state.descriptors[route.key] || (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n        var nextDescriptor = nextRoute && (props.descriptors[nextRoute == null ? void 0 : nextRoute.key] || state.descriptors[nextRoute == null ? void 0 : nextRoute.key]);\n        var previousDescriptor = previousRoute && (props.descriptors[previousRoute == null ? void 0 : previousRoute.key] || state.descriptors[previousRoute == null ? void 0 : previousRoute.key]);\n        var optionsForTransitionConfig = index !== self.length - 1 && nextDescriptor && nextDescriptor.options.presentation !== 'transparentModal' ? nextDescriptor.options : descriptor.options;\n        var isModal = modalRouteKeys.includes(route.key);\n        var excludedPlatforms = Platform.OS !== 'web' && Platform.OS !== 'windows' && Platform.OS !== 'macos';\n        var animation = (_optionsForTransition = optionsForTransitionConfig.animation) != null ? _optionsForTransition : excludedPlatforms ? 'default' : 'none';\n        var isAnimationEnabled = animation !== 'none';\n        var transitionPreset = animation !== 'default' ? NAMED_TRANSITIONS_PRESETS[animation] : isModal || optionsForTransitionConfig.presentation === 'modal' ? ModalTransition : optionsForTransitionConfig.presentation === 'transparentModal' ? ModalFadeTransition : DefaultTransition;\n        var _optionsForTransition2 = optionsForTransitionConfig.gestureEnabled,\n          gestureEnabled = _optionsForTransition2 === void 0 ? Platform.OS === 'ios' && isAnimationEnabled : _optionsForTransition2,\n          _optionsForTransition3 = optionsForTransitionConfig.gestureDirection,\n          gestureDirection = _optionsForTransition3 === void 0 ? transitionPreset.gestureDirection : _optionsForTransition3,\n          _optionsForTransition4 = optionsForTransitionConfig.transitionSpec,\n          transitionSpec = _optionsForTransition4 === void 0 ? transitionPreset.transitionSpec : _optionsForTransition4,\n          _optionsForTransition5 = optionsForTransitionConfig.cardStyleInterpolator,\n          cardStyleInterpolator = _optionsForTransition5 === void 0 ? isAnimationEnabled ? transitionPreset.cardStyleInterpolator : forNoAnimationCard : _optionsForTransition5,\n          _optionsForTransition6 = optionsForTransitionConfig.headerStyleInterpolator,\n          headerStyleInterpolator = _optionsForTransition6 === void 0 ? transitionPreset.headerStyleInterpolator : _optionsForTransition6,\n          _optionsForTransition7 = optionsForTransitionConfig.cardOverlayEnabled,\n          cardOverlayEnabled = _optionsForTransition7 === void 0 ? Platform.OS !== 'ios' && optionsForTransitionConfig.presentation !== 'transparentModal' || getIsModalPresentation(cardStyleInterpolator) : _optionsForTransition7;\n        var headerMode = (_descriptor$options$h = descriptor.options.headerMode) != null ? _descriptor$options$h : !(optionsForTransitionConfig.presentation === 'modal' || optionsForTransitionConfig.presentation === 'transparentModal' || (nextDescriptor == null ? void 0 : nextDescriptor.options.presentation) === 'modal' || (nextDescriptor == null ? void 0 : nextDescriptor.options.presentation) === 'transparentModal' || getIsModalPresentation(cardStyleInterpolator)) && Platform.OS === 'ios' && descriptor.options.header === undefined ? 'float' : 'screen';\n        var isRTL = props.direction === 'rtl';\n        var scene = {\n          route: route,\n          descriptor: _objectSpread(_objectSpread({}, descriptor), {}, {\n            options: _objectSpread(_objectSpread({}, descriptor.options), {}, {\n              animation: animation,\n              cardOverlayEnabled: cardOverlayEnabled,\n              cardStyleInterpolator: cardStyleInterpolator,\n              gestureDirection: gestureDirection,\n              gestureEnabled: gestureEnabled,\n              headerStyleInterpolator: headerStyleInterpolator,\n              transitionSpec: transitionSpec,\n              headerMode: headerMode\n            })\n          }),\n          progress: {\n            current: getProgressFromGesture(currentGesture, state.layout, descriptor, isRTL),\n            next: nextGesture && (nextDescriptor == null ? void 0 : nextDescriptor.options.presentation) !== 'transparentModal' ? getProgressFromGesture(nextGesture, state.layout, nextDescriptor, isRTL) : undefined,\n            previous: previousGesture ? getProgressFromGesture(previousGesture, state.layout, previousDescriptor, isRTL) : undefined\n          },\n          __memo: [state.layout, descriptor, nextDescriptor, previousDescriptor, currentGesture, nextGesture, previousGesture]\n        };\n        if (oldScene && scene.__memo.every(function (it, i) {\n          return oldScene.__memo[i] === it;\n        })) {\n          return oldScene;\n        }\n        return scene;\n      });\n      return {\n        routes: props.routes,\n        scenes: scenes,\n        gestures: gestures,\n        descriptors: props.descriptors,\n        headerHeights: getHeaderHeights(scenes, props.insets, props.isParentHeaderShown, props.isParentModal, state.layout, state.headerHeights)\n      };\n    }\n  }]);\n}(React.Component);\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    start: 0,\n    end: 0\n  },\n  floating: {\n    zIndex: 1\n  }\n});","map":{"version":3,"names":["getDefaultHeaderHeight","SafeAreaProviderCompat","React","Animated","Platform","StyleSheet","View","forModalPresentationIOS","forNoAnimation","forNoAnimationCard","BottomSheetAndroid","DefaultTransition","FadeFromBottomAndroid","FadeFromRightAndroid","ModalFadeTransition","ModalSlideFromBottomIOS","ModalTransition","RevealFromBottomAndroid","ScaleFromCenterAndroid","SlideFromLeftIOS","SlideFromRightIOS","findLastIndex","getDistanceForDirection","getModalRouteKeys","MaybeScreen","MaybeScreenContainer","CardContainer","jsx","_jsx","jsxs","_jsxs","NAMED_TRANSITIONS_PRESETS","default","fade","fade_from_bottom","fade_from_right","none","reveal_from_bottom","scale_from_center","slide_from_left","slide_from_right","slide_from_bottom","select","ios","EPSILON","STATE_INACTIVE","STATE_TRANSITIONING_OR_BELOW_TOP","STATE_ON_TOP","FALLBACK_DESCRIPTOR","Object","freeze","options","getInterpolationIndex","scenes","index","cardStyleInterpolator","descriptor","interpolationIndex","i","_scenes$i","cardStyleInterpolatorCurrent","getIsModalPresentation","name","getIsModal","scene","isParentModal","isModalPresentation","isModal","getHeaderHeights","insets","isParentHeaderShown","layout","previous","reduce","acc","curr","_curr$descriptor$opti","_curr$descriptor$opti2","headerStatusBarHeight","top","headerStyle","style","flatten","height","route","key","getDistanceFromOptions","isRTL","_NAMED_TRANSITIONS_PR","gestureDirection","defaultGestureDirection","presentation","animation","getProgressFromGesture","gesture","distance","width","Math","max","interpolate","inputRange","outputRange","CardStack","_React$Component","_props","_this","_classCallCheck","_callSuper","_defineProperty","e","_e$nativeEvent$layout","nativeEvent","setState","state","props","headerHeights","_ref","_ref2","previousHeight","_objectSpread","_defineProperty2","routes","_ref3","getPreviousRoute","previousRoute","previousScene","find","undefined","gestures","initialMetrics","frame","descriptors","_inherits","_createClass","value","render","_this2","_this$props","openingRouteKeys","closingRouteKeys","onOpenRoute","onCloseRoute","renderHeader","onTransitionStart","onTransitionEnd","onGestureStart","onGestureEnd","onGestureCancel","_this$props$detachIna","detachInactiveScreens","OS","_this$state","focusedRoute","focusedHeaderHeight","isFloatHeaderAbsolute","slice","some","_scene$descriptor$opt","headerMode","headerTransparent","_options$headerShown","headerShown","activeScreensLimit","length","_options$detachPrevio","detachPreviousScreen","floatingHeader","Fragment","children","mode","getPreviousScene","getFocusedRoute","onContentHeightChange","handleHeaderLayout","styles","floating","absolute","container","enabled","onLayout","handleLayout","concat","_toConsumableArray","preloadedRoutes","map","_scenes","_scenes2","focused","isPreloaded","includes","isScreenActive","sceneForActivity","outputValue","progress","current","extrapolate","_scene$descriptor$opt2","_scene$descriptor$opt3","freezeOnBlur","autoHideHomeIndicator","safeAreaInsetTop","safeAreaInsetRight","right","safeAreaInsetBottom","bottom","safeAreaInsetLeft","left","headerHeight","isNextScreenTransparent","detachCurrentScreen","absoluteFill","active","homeIndicatorHidden","pointerEvents","modal","opening","closing","onHeaderHeightChange","hasAbsoluteFloatHeader","preloaded","getDerivedStateFromProps","preloadedDescriptors","_ref4","Value","direction","modalRouteKeys","self","_optionsForTransition","_descriptor$options$h","nextRoute","oldScene","currentGesture","previousGesture","nextGesture","nextDescriptor","previousDescriptor","optionsForTransitionConfig","excludedPlatforms","isAnimationEnabled","transitionPreset","_optionsForTransition2","gestureEnabled","_optionsForTransition3","_optionsForTransition4","transitionSpec","_optionsForTransition5","_optionsForTransition6","headerStyleInterpolator","_optionsForTransition7","cardOverlayEnabled","header","next","__memo","every","it","Component","create","flex","position","start","end","zIndex"],"sources":["D:\\FROM_HDD\\PC_Backup\\DUTH\\THESIS\\new\\node_modules\\@react-navigation\\stack\\src\\views\\Stack\\CardStack.tsx"],"sourcesContent":["import {\n  getDefaultHeaderHeight,\n  SafeAreaProviderCompat,\n} from '@react-navigation/elements';\nimport type {\n  LocaleDirection,\n  ParamListBase,\n  Route,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport {\n  Animated,\n  type LayoutChangeEvent,\n  Platform,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport type { EdgeInsets } from 'react-native-safe-area-context';\n\nimport {\n  forModalPresentationIOS,\n  forNoAnimation as forNoAnimationCard,\n} from '../../TransitionConfigs/CardStyleInterpolators';\nimport {\n  BottomSheetAndroid,\n  DefaultTransition,\n  FadeFromBottomAndroid,\n  FadeFromRightAndroid,\n  ModalFadeTransition,\n  ModalSlideFromBottomIOS,\n  ModalTransition,\n  RevealFromBottomAndroid,\n  ScaleFromCenterAndroid,\n  SlideFromLeftIOS,\n  SlideFromRightIOS,\n} from '../../TransitionConfigs/TransitionPresets';\nimport type {\n  Layout,\n  Scene,\n  StackAnimationName,\n  StackCardStyleInterpolator,\n  StackDescriptor,\n  StackDescriptorMap,\n  StackHeaderMode,\n  TransitionPreset,\n} from '../../types';\nimport { findLastIndex } from '../../utils/findLastIndex';\nimport { getDistanceForDirection } from '../../utils/getDistanceForDirection';\nimport { getModalRouteKeys } from '../../utils/getModalRoutesKeys';\nimport type { Props as HeaderContainerProps } from '../Header/HeaderContainer';\nimport { MaybeScreen, MaybeScreenContainer } from '../Screens';\nimport { CardContainer } from './CardContainer';\n\ntype GestureValues = {\n  [key: string]: Animated.Value;\n};\n\ntype Props = {\n  direction: LocaleDirection;\n  insets: EdgeInsets;\n  state: StackNavigationState<ParamListBase>;\n  descriptors: StackDescriptorMap;\n  preloadedDescriptors: StackDescriptorMap;\n  routes: Route<string>[];\n  openingRouteKeys: string[];\n  closingRouteKeys: string[];\n  onOpenRoute: (props: { route: Route<string> }) => void;\n  onCloseRoute: (props: { route: Route<string> }) => void;\n  getPreviousRoute: (props: {\n    route: Route<string>;\n  }) => Route<string> | undefined;\n  renderHeader: (props: HeaderContainerProps) => React.ReactNode;\n  isParentHeaderShown: boolean;\n  isParentModal: boolean;\n  onTransitionStart: (\n    props: { route: Route<string> },\n    closing: boolean\n  ) => void;\n  onTransitionEnd: (props: { route: Route<string> }, closing: boolean) => void;\n  onGestureStart: (props: { route: Route<string> }) => void;\n  onGestureEnd: (props: { route: Route<string> }) => void;\n  onGestureCancel: (props: { route: Route<string> }) => void;\n  detachInactiveScreens?: boolean;\n};\n\ntype State = {\n  routes: Route<string>[];\n  descriptors: StackDescriptorMap;\n  scenes: Scene[];\n  gestures: GestureValues;\n  layout: Layout;\n  headerHeights: Record<string, number>;\n};\n\nconst NAMED_TRANSITIONS_PRESETS = {\n  default: DefaultTransition,\n  fade: ModalFadeTransition,\n  fade_from_bottom: FadeFromBottomAndroid,\n  fade_from_right: FadeFromRightAndroid,\n  none: DefaultTransition,\n  reveal_from_bottom: RevealFromBottomAndroid,\n  scale_from_center: ScaleFromCenterAndroid,\n  slide_from_left: SlideFromLeftIOS,\n  slide_from_right: SlideFromRightIOS,\n  slide_from_bottom: Platform.select({\n    ios: ModalSlideFromBottomIOS,\n    default: BottomSheetAndroid,\n  }),\n} as const satisfies Record<StackAnimationName, TransitionPreset>;\n\nconst EPSILON = 1e-5;\n\nconst STATE_INACTIVE = 0;\nconst STATE_TRANSITIONING_OR_BELOW_TOP = 1;\nconst STATE_ON_TOP = 2;\n\nconst FALLBACK_DESCRIPTOR = Object.freeze({ options: {} });\n\nconst getInterpolationIndex = (scenes: Scene[], index: number) => {\n  const { cardStyleInterpolator } = scenes[index].descriptor.options;\n\n  // Start from current card and count backwards the number of cards with same interpolation\n  let interpolationIndex = 0;\n\n  for (let i = index - 1; i >= 0; i--) {\n    const cardStyleInterpolatorCurrent =\n      scenes[i]?.descriptor.options.cardStyleInterpolator;\n\n    if (cardStyleInterpolatorCurrent !== cardStyleInterpolator) {\n      break;\n    }\n\n    interpolationIndex++;\n  }\n\n  return interpolationIndex;\n};\n\nconst getIsModalPresentation = (\n  cardStyleInterpolator: StackCardStyleInterpolator\n) => {\n  return (\n    cardStyleInterpolator === forModalPresentationIOS ||\n    // Handle custom modal presentation interpolators as well\n    cardStyleInterpolator.name === 'forModalPresentationIOS'\n  );\n};\n\nconst getIsModal = (\n  scene: Scene,\n  interpolationIndex: number,\n  isParentModal: boolean\n) => {\n  if (isParentModal) {\n    return true;\n  }\n\n  const { cardStyleInterpolator } = scene.descriptor.options;\n  const isModalPresentation = getIsModalPresentation(cardStyleInterpolator);\n  const isModal = isModalPresentation && interpolationIndex !== 0;\n\n  return isModal;\n};\n\nconst getHeaderHeights = (\n  scenes: Scene[],\n  insets: EdgeInsets,\n  isParentHeaderShown: boolean,\n  isParentModal: boolean,\n  layout: Layout,\n  previous: Record<string, number>\n) => {\n  return scenes.reduce<Record<string, number>>((acc, curr, index) => {\n    const {\n      headerStatusBarHeight = isParentHeaderShown ? 0 : insets.top,\n      headerStyle,\n    } = curr.descriptor.options;\n\n    const style = StyleSheet.flatten(headerStyle || {});\n\n    const height =\n      'height' in style && typeof style.height === 'number'\n        ? style.height\n        : previous[curr.route.key];\n\n    const interpolationIndex = getInterpolationIndex(scenes, index);\n    const isModal = getIsModal(curr, interpolationIndex, isParentModal);\n\n    acc[curr.route.key] =\n      typeof height === 'number'\n        ? height\n        : getDefaultHeaderHeight(layout, isModal, headerStatusBarHeight);\n\n    return acc;\n  }, {});\n};\n\nconst getDistanceFromOptions = (\n  layout: Layout,\n  descriptor: StackDescriptor | undefined,\n  isRTL: boolean\n) => {\n  if (descriptor?.options.gestureDirection) {\n    return getDistanceForDirection(\n      layout,\n      descriptor?.options.gestureDirection,\n      isRTL\n    );\n  }\n\n  const defaultGestureDirection =\n    descriptor?.options.presentation === 'modal'\n      ? ModalTransition.gestureDirection\n      : DefaultTransition.gestureDirection;\n\n  const gestureDirection = descriptor?.options.animation\n    ? NAMED_TRANSITIONS_PRESETS[descriptor?.options.animation]?.gestureDirection\n    : defaultGestureDirection;\n\n  return getDistanceForDirection(layout, gestureDirection, isRTL);\n};\n\nconst getProgressFromGesture = (\n  gesture: Animated.Value,\n  layout: Layout,\n  descriptor: StackDescriptor | undefined,\n  isRTL: boolean\n) => {\n  const distance = getDistanceFromOptions(\n    {\n      // Make sure that we have a non-zero distance, otherwise there will be incorrect progress\n      // This causes blank screen on web if it was previously inside container with display: none\n      width: Math.max(1, layout.width),\n      height: Math.max(1, layout.height),\n    },\n    descriptor,\n    isRTL\n  );\n\n  if (distance > 0) {\n    return gesture.interpolate({\n      inputRange: [0, distance],\n      outputRange: [1, 0],\n    });\n  }\n\n  return gesture.interpolate({\n    inputRange: [distance, 0],\n    outputRange: [0, 1],\n  });\n};\n\nexport class CardStack extends React.Component<Props, State> {\n  static getDerivedStateFromProps(\n    props: Props,\n    state: State\n  ): Partial<State> | null {\n    if (\n      props.routes === state.routes &&\n      props.descriptors === state.descriptors\n    ) {\n      return null;\n    }\n\n    const gestures = [\n      ...props.routes,\n      ...props.state.preloadedRoutes,\n    ].reduce<GestureValues>((acc, curr) => {\n      const descriptor =\n        props.descriptors[curr.key] || props.preloadedDescriptors[curr.key];\n      const { animation } = descriptor?.options || {};\n\n      acc[curr.key] =\n        state.gestures[curr.key] ||\n        new Animated.Value(\n          (props.openingRouteKeys.includes(curr.key) && animation !== 'none') ||\n          props.state.preloadedRoutes.includes(curr)\n            ? getDistanceFromOptions(\n                state.layout,\n                descriptor,\n                props.direction === 'rtl'\n              )\n            : 0\n        );\n\n      return acc;\n    }, {});\n\n    const modalRouteKeys = getModalRouteKeys(\n      [...props.routes, ...props.state.preloadedRoutes],\n      {\n        ...props.descriptors,\n        ...props.preloadedDescriptors,\n      }\n    );\n\n    const scenes = [...props.routes, ...props.state.preloadedRoutes].map(\n      (route, index, self) => {\n        // For preloaded screens, we don't care about the previous and the next screen\n        const isPreloaded = props.state.preloadedRoutes.includes(route);\n        const previousRoute = isPreloaded ? undefined : self[index - 1];\n        const nextRoute = isPreloaded ? undefined : self[index + 1];\n\n        const oldScene = state.scenes[index];\n\n        const currentGesture = gestures[route.key];\n        const previousGesture = previousRoute\n          ? gestures[previousRoute.key]\n          : undefined;\n        const nextGesture = nextRoute ? gestures[nextRoute.key] : undefined;\n\n        const descriptor =\n          (isPreloaded ? props.preloadedDescriptors : props.descriptors)[\n            route.key\n          ] ||\n          state.descriptors[route.key] ||\n          (oldScene ? oldScene.descriptor : FALLBACK_DESCRIPTOR);\n\n        const nextDescriptor =\n          nextRoute &&\n          (props.descriptors[nextRoute?.key] ||\n            state.descriptors[nextRoute?.key]);\n\n        const previousDescriptor =\n          previousRoute &&\n          (props.descriptors[previousRoute?.key] ||\n            state.descriptors[previousRoute?.key]);\n\n        // When a screen is not the last, it should use next screen's transition config\n        // Many transitions also animate the previous screen, so using 2 different transitions doesn't look right\n        // For example combining a slide and a modal transition would look wrong otherwise\n        // With this approach, combining different transition styles in the same navigator mostly looks right\n        // This will still be broken when 2 transitions have different idle state (e.g. modal presentation),\n        // but the majority of the transitions look alright\n        const optionsForTransitionConfig =\n          index !== self.length - 1 &&\n          nextDescriptor &&\n          nextDescriptor.options.presentation !== 'transparentModal'\n            ? nextDescriptor.options\n            : descriptor.options;\n\n        // Assume modal if there are already modal screens in the stack\n        // or current screen is a modal when no presentation is specified\n        const isModal = modalRouteKeys.includes(route.key);\n\n        // Disable screen transition animation by default on web, windows and macos to match the native behavior\n        const excludedPlatforms =\n          Platform.OS !== 'web' &&\n          Platform.OS !== 'windows' &&\n          Platform.OS !== 'macos';\n\n        const animation =\n          optionsForTransitionConfig.animation ??\n          (excludedPlatforms ? 'default' : 'none');\n        const isAnimationEnabled = animation !== 'none';\n\n        const transitionPreset =\n          animation !== 'default'\n            ? NAMED_TRANSITIONS_PRESETS[animation]\n            : isModal || optionsForTransitionConfig.presentation === 'modal'\n              ? ModalTransition\n              : optionsForTransitionConfig.presentation === 'transparentModal'\n                ? ModalFadeTransition\n                : DefaultTransition;\n\n        const {\n          gestureEnabled = Platform.OS === 'ios' && isAnimationEnabled,\n          gestureDirection = transitionPreset.gestureDirection,\n          transitionSpec = transitionPreset.transitionSpec,\n          cardStyleInterpolator = isAnimationEnabled\n            ? transitionPreset.cardStyleInterpolator\n            : forNoAnimationCard,\n          headerStyleInterpolator = transitionPreset.headerStyleInterpolator,\n          cardOverlayEnabled = (Platform.OS !== 'ios' &&\n            optionsForTransitionConfig.presentation !== 'transparentModal') ||\n            getIsModalPresentation(cardStyleInterpolator),\n        } = optionsForTransitionConfig;\n\n        const headerMode: StackHeaderMode =\n          descriptor.options.headerMode ??\n          (!(\n            optionsForTransitionConfig.presentation === 'modal' ||\n            optionsForTransitionConfig.presentation === 'transparentModal' ||\n            nextDescriptor?.options.presentation === 'modal' ||\n            nextDescriptor?.options.presentation === 'transparentModal' ||\n            getIsModalPresentation(cardStyleInterpolator)\n          ) &&\n          Platform.OS === 'ios' &&\n          descriptor.options.header === undefined\n            ? 'float'\n            : 'screen');\n\n        const isRTL = props.direction === 'rtl';\n\n        const scene = {\n          route,\n          descriptor: {\n            ...descriptor,\n            options: {\n              ...descriptor.options,\n              animation,\n              cardOverlayEnabled,\n              cardStyleInterpolator,\n              gestureDirection,\n              gestureEnabled,\n              headerStyleInterpolator,\n              transitionSpec,\n              headerMode,\n            },\n          },\n          progress: {\n            current: getProgressFromGesture(\n              currentGesture,\n              state.layout,\n              descriptor,\n              isRTL\n            ),\n            next:\n              nextGesture &&\n              nextDescriptor?.options.presentation !== 'transparentModal'\n                ? getProgressFromGesture(\n                    nextGesture,\n                    state.layout,\n                    nextDescriptor,\n                    isRTL\n                  )\n                : undefined,\n            previous: previousGesture\n              ? getProgressFromGesture(\n                  previousGesture,\n                  state.layout,\n                  previousDescriptor,\n                  isRTL\n                )\n              : undefined,\n          },\n          __memo: [\n            state.layout,\n            descriptor,\n            nextDescriptor,\n            previousDescriptor,\n            currentGesture,\n            nextGesture,\n            previousGesture,\n          ],\n        };\n\n        if (\n          oldScene &&\n          scene.__memo.every((it, i) => {\n            // @ts-expect-error: we haven't added __memo to the annotation to prevent usage elsewhere\n            return oldScene.__memo[i] === it;\n          })\n        ) {\n          return oldScene;\n        }\n\n        return scene;\n      }\n    );\n\n    return {\n      routes: props.routes,\n      scenes,\n      gestures,\n      descriptors: props.descriptors,\n      headerHeights: getHeaderHeights(\n        scenes,\n        props.insets,\n        props.isParentHeaderShown,\n        props.isParentModal,\n        state.layout,\n        state.headerHeights\n      ),\n    };\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      routes: [],\n      scenes: [],\n      gestures: {},\n      layout: SafeAreaProviderCompat.initialMetrics.frame,\n      descriptors: this.props.descriptors,\n      // Used when card's header is null and mode is float to make transition\n      // between screens with headers and those without headers smooth.\n      // This is not a great heuristic here. We don't know synchronously\n      // on mount what the header height is so we have just used the most\n      // common cases here.\n      headerHeights: {},\n    };\n  }\n\n  private handleLayout = (e: LayoutChangeEvent) => {\n    const { height, width } = e.nativeEvent.layout;\n\n    const layout = { width, height };\n\n    this.setState((state, props) => {\n      if (height === state.layout.height && width === state.layout.width) {\n        return null;\n      }\n\n      return {\n        layout,\n        headerHeights: getHeaderHeights(\n          state.scenes,\n          props.insets,\n          props.isParentHeaderShown,\n          props.isParentModal,\n          layout,\n          state.headerHeights\n        ),\n      };\n    });\n  };\n\n  private handleHeaderLayout = ({\n    route,\n    height,\n  }: {\n    route: Route<string>;\n    height: number;\n  }) => {\n    this.setState(({ headerHeights }) => {\n      const previousHeight = headerHeights[route.key];\n\n      if (previousHeight === height) {\n        return null;\n      }\n\n      return {\n        headerHeights: {\n          ...headerHeights,\n          [route.key]: height,\n        },\n      };\n    });\n  };\n\n  private getFocusedRoute = () => {\n    const { state } = this.props;\n\n    return state.routes[state.index];\n  };\n\n  private getPreviousScene = ({ route }: { route: Route<string> }) => {\n    const { getPreviousRoute } = this.props;\n    const { scenes } = this.state;\n\n    const previousRoute = getPreviousRoute({ route });\n\n    if (previousRoute) {\n      const previousScene = scenes.find(\n        (scene) => scene.descriptor.route.key === previousRoute.key\n      );\n\n      return previousScene;\n    }\n\n    return undefined;\n  };\n\n  render() {\n    const {\n      insets,\n      state,\n      routes,\n      openingRouteKeys,\n      closingRouteKeys,\n      onOpenRoute,\n      onCloseRoute,\n      renderHeader,\n      isParentHeaderShown,\n      isParentModal,\n      onTransitionStart,\n      onTransitionEnd,\n      onGestureStart,\n      onGestureEnd,\n      onGestureCancel,\n      detachInactiveScreens = Platform.OS === 'web' ||\n        Platform.OS === 'android' ||\n        Platform.OS === 'ios',\n    } = this.props;\n\n    const { scenes, layout, gestures, headerHeights } = this.state;\n\n    const focusedRoute = state.routes[state.index];\n    const focusedHeaderHeight = headerHeights[focusedRoute.key];\n\n    const isFloatHeaderAbsolute = this.state.scenes.slice(-2).some((scene) => {\n      const options = scene.descriptor.options ?? {};\n      const { headerMode, headerTransparent, headerShown = true } = options;\n\n      if (\n        headerTransparent ||\n        headerShown === false ||\n        headerMode === 'screen'\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n\n    let activeScreensLimit = 1;\n\n    for (let i = scenes.length - 1; i >= 0; i--) {\n      const { options } = scenes[i].descriptor;\n      const {\n        // By default, we don't want to detach the previous screen of the active one for modals\n        detachPreviousScreen = options.presentation === 'transparentModal'\n          ? false\n          : getIsModalPresentation(options.cardStyleInterpolator)\n            ? i !==\n              findLastIndex(scenes, (scene) => {\n                const { cardStyleInterpolator } = scene.descriptor.options;\n\n                return (\n                  cardStyleInterpolator === forModalPresentationIOS ||\n                  cardStyleInterpolator?.name === 'forModalPresentationIOS'\n                );\n              })\n            : true,\n      } = options;\n\n      if (detachPreviousScreen === false) {\n        activeScreensLimit++;\n      } else {\n        // Check at least last 2 screens before stopping\n        // This will make sure that screen isn't detached when another screen is animating on top of the transparent one\n        // For example, (Opaque -> Transparent -> Opaque)\n        if (i <= scenes.length - 2) {\n          break;\n        }\n      }\n    }\n\n    const floatingHeader = (\n      <React.Fragment key=\"header\">\n        {renderHeader({\n          mode: 'float',\n          layout,\n          scenes,\n          getPreviousScene: this.getPreviousScene,\n          getFocusedRoute: this.getFocusedRoute,\n          onContentHeightChange: this.handleHeaderLayout,\n          style: [\n            styles.floating,\n            isFloatHeaderAbsolute && [\n              // Without this, the header buttons won't be touchable on Android when headerTransparent: true\n              { height: focusedHeaderHeight },\n              styles.absolute,\n            ],\n          ],\n        })}\n      </React.Fragment>\n    );\n\n    return (\n      <View style={styles.container}>\n        {isFloatHeaderAbsolute ? null : floatingHeader}\n        <MaybeScreenContainer\n          enabled={detachInactiveScreens}\n          style={styles.container}\n          onLayout={this.handleLayout}\n        >\n          {[...routes, ...state.preloadedRoutes].map((route, index) => {\n            const focused = focusedRoute.key === route.key;\n            const gesture = gestures[route.key];\n            const scene = scenes[index];\n            // It is possible that for a short period the route appears in both arrays.\n            // Particularly, if the screen is removed with `retain`, then it needs a moment to execute the animation.\n            // However, due to the router action, it immediately populates the `preloadedRoutes` array.\n            // Practically, the logic below takes care that it is rendered only once.\n            const isPreloaded =\n              state.preloadedRoutes.includes(route) && !routes.includes(route);\n            if (\n              state.preloadedRoutes.includes(route) &&\n              routes.includes(route) &&\n              index >= routes.length\n            ) {\n              return null;\n            }\n\n            // For the screens that shouldn't be active, the value is 0\n            // For those that should be active, but are not the top screen, the value is 1\n            // For those on top of the stack and with interaction enabled, the value is 2\n            // For the old implementation, it stays the same it was\n            let isScreenActive:\n              | Animated.AnimatedInterpolation<0 | 1 | 2>\n              | 0\n              | 1\n              | 2 = 1;\n\n            if (index < routes.length - activeScreensLimit - 1 || isPreloaded) {\n              // screen should be inactive because it is too deep in the stack\n              isScreenActive = STATE_INACTIVE;\n            } else {\n              const sceneForActivity = scenes[routes.length - 1];\n              const outputValue =\n                index === routes.length - 1\n                  ? STATE_ON_TOP // the screen is on top after the transition\n                  : index >= routes.length - activeScreensLimit\n                    ? STATE_TRANSITIONING_OR_BELOW_TOP // the screen should stay active after the transition, it is not on top but is in activeLimit\n                    : STATE_INACTIVE; // the screen should be active only during the transition, it is at the edge of activeLimit\n              isScreenActive = sceneForActivity\n                ? sceneForActivity.progress.current.interpolate({\n                    inputRange: [0, 1 - EPSILON, 1],\n                    outputRange: [1, 1, outputValue],\n                    extrapolate: 'clamp',\n                  })\n                : STATE_TRANSITIONING_OR_BELOW_TOP;\n            }\n\n            const {\n              headerShown = true,\n              headerTransparent,\n              freezeOnBlur,\n              autoHideHomeIndicator,\n            } = scene.descriptor.options;\n\n            const safeAreaInsetTop = insets.top;\n            const safeAreaInsetRight = insets.right;\n            const safeAreaInsetBottom = insets.bottom;\n            const safeAreaInsetLeft = insets.left;\n\n            const headerHeight =\n              headerShown !== false ? headerHeights[route.key] : 0;\n\n            // Start from current card and count backwards the number of cards with same interpolation\n            const interpolationIndex = getInterpolationIndex(scenes, index);\n            const isModal = getIsModal(\n              scene,\n              interpolationIndex,\n              isParentModal\n            );\n\n            const isNextScreenTransparent =\n              scenes[index + 1]?.descriptor.options.presentation ===\n              'transparentModal';\n\n            const detachCurrentScreen =\n              scenes[index + 1]?.descriptor.options.detachPreviousScreen !==\n              false;\n\n            return (\n              <MaybeScreen\n                key={route.key}\n                style={[StyleSheet.absoluteFill]}\n                enabled={detachInactiveScreens}\n                active={isScreenActive}\n                freezeOnBlur={freezeOnBlur}\n                homeIndicatorHidden={autoHideHomeIndicator}\n                pointerEvents=\"box-none\"\n              >\n                <CardContainer\n                  index={index}\n                  interpolationIndex={interpolationIndex}\n                  modal={isModal}\n                  active={index === routes.length - 1}\n                  focused={focused}\n                  opening={openingRouteKeys.includes(route.key)}\n                  closing={closingRouteKeys.includes(route.key)}\n                  layout={layout}\n                  gesture={gesture}\n                  scene={scene}\n                  safeAreaInsetTop={safeAreaInsetTop}\n                  safeAreaInsetRight={safeAreaInsetRight}\n                  safeAreaInsetBottom={safeAreaInsetBottom}\n                  safeAreaInsetLeft={safeAreaInsetLeft}\n                  onGestureStart={onGestureStart}\n                  onGestureCancel={onGestureCancel}\n                  onGestureEnd={onGestureEnd}\n                  headerHeight={headerHeight}\n                  isParentHeaderShown={isParentHeaderShown}\n                  onHeaderHeightChange={this.handleHeaderLayout}\n                  getPreviousScene={this.getPreviousScene}\n                  getFocusedRoute={this.getFocusedRoute}\n                  hasAbsoluteFloatHeader={\n                    isFloatHeaderAbsolute && !headerTransparent\n                  }\n                  renderHeader={renderHeader}\n                  onOpenRoute={onOpenRoute}\n                  onCloseRoute={onCloseRoute}\n                  onTransitionStart={onTransitionStart}\n                  onTransitionEnd={onTransitionEnd}\n                  isNextScreenTransparent={isNextScreenTransparent}\n                  detachCurrentScreen={detachCurrentScreen}\n                  preloaded={isPreloaded}\n                />\n              </MaybeScreen>\n            );\n          })}\n        </MaybeScreenContainer>\n        {isFloatHeaderAbsolute ? floatingHeader : null}\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  absolute: {\n    position: 'absolute',\n    top: 0,\n    start: 0,\n    end: 0,\n  },\n  floating: {\n    zIndex: 1,\n  },\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}